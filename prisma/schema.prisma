// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(uuid())
  email         String          @unique
  password      String
  name          String?
  projectOwned  Project[]       @relation("ProjectOwner")
  projects      ProjectMember[]
  tasksAssigned Task[]          @relation("TaskAssignee")
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}

model Project {
  id          String          @id @default(uuid())
  title       String
  description String?
  ownerId     String
  owner       User            @relation("ProjectOwner", fields: [ownerId], references: [id])
  members     ProjectMember[]
  tasks       Task[]
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
}

model ProjectMember {
  userId     String
  projectId  String
  user User @relation(fields: [userId], references: [id])
  project Project @relation(fields: [projectId], references: [id])
  assignedAt DateTime @default(now())

  @@id([userId, projectId])
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  DONE
}

model Task {
  id          String     @id @default(uuid())
  title       String
  description String?
  status      TaskStatus @default(TODO)
  projectId   String
  project Project @relation(fields: [projectId], references: [id])
  assigneeId  String?
  assignee User? @relation("TaskAssignee", fields: [assigneeId], references: [id])
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}
